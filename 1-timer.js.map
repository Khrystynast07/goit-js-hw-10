{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst inputTimer = document.querySelector('#datetime-picker');\nconst startBtn = document.querySelector('button[data-start]');\nconst daysSpan = document.querySelector('[data-days]');\nconst hoursSpan = document.querySelector('[data-hours]');\nconst minutesSpan = document.querySelector('[data-minutes]');\nconst secondsSpan = document.querySelector('[data-seconds]');\n\nstartBtn.addEventListener('click', start);\n\nlet userSelectedDate;\nlet interval;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    if (selectedDates[0] <= new Date()) {\n      startBtn.disabled = true;\n      return iziToast.error({\n        message: 'Please choose a date in the future',\n        position: 'topRight',\n      });\n    }\n    startBtn.disabled = false;\n    userSelectedDate = selectedDates[0];\n  },\n};\n\nflatpickr(inputTimer, options);\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\nfunction start() {\n  interval = setInterval(updateTimer, 1000);\n  startBtn.disabled = true;\n  inputTimer.disabled = true;\n}\n\nfunction updateTimer() {\n  const difference = userSelectedDate - new Date();\n  const { days, hours, minutes, seconds } = convertMs(difference);\n  if (difference < 1) {\n    clearInterval(interval);\n    inputTimer.disabled = false;\n    return;\n  }\n  daysSpan.textContent = addLeadingZero(days);\n  hoursSpan.textContent = addLeadingZero(hours);\n  minutesSpan.textContent = addLeadingZero(minutes);\n  secondsSpan.textContent = addLeadingZero(seconds);\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\n// console.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\n// console.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\n// console.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}\n"],"names":["inputTimer","startBtn","daysSpan","hoursSpan","minutesSpan","secondsSpan","start","userSelectedDate","interval","options","selectedDates","iziToast","flatpickr","addLeadingZero","value","updateTimer","difference","days","hours","minutes","seconds","convertMs","ms"],"mappings":"2FAKA,MAAMA,EAAa,SAAS,cAAc,kBAAkB,EACtDC,EAAW,SAAS,cAAc,oBAAoB,EACtDC,EAAW,SAAS,cAAc,aAAa,EAC/CC,EAAY,SAAS,cAAc,cAAc,EACjDC,EAAc,SAAS,cAAc,gBAAgB,EACrDC,EAAc,SAAS,cAAc,gBAAgB,EAE3DJ,EAAS,iBAAiB,QAASK,CAAK,EAExC,IAAIC,EACAC,EAEJ,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,GAAIA,EAAc,CAAC,GAAK,IAAI,KAC1B,OAAAT,EAAS,SAAW,GACbU,EAAS,MAAM,CACpB,QAAS,qCACT,SAAU,UAClB,CAAO,EAEHV,EAAS,SAAW,GACpBM,EAAmBG,EAAc,CAAC,CACnC,CACH,EAEAE,EAAUZ,EAAYS,CAAO,EAE7B,SAASI,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAEA,SAASR,GAAQ,CACfE,EAAW,YAAYO,EAAa,GAAI,EACxCd,EAAS,SAAW,GACpBD,EAAW,SAAW,EACxB,CAEA,SAASe,GAAc,CACrB,MAAMC,EAAaT,EAAmB,IAAI,KACpC,CAAE,KAAAU,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAU,EAC9D,GAAIA,EAAa,EAAG,CAClB,cAAcR,CAAQ,EACtBR,EAAW,SAAW,GACtB,MACD,CACDE,EAAS,YAAcW,EAAeI,CAAI,EAC1Cd,EAAU,YAAcU,EAAeK,CAAK,EAC5Cd,EAAY,YAAcS,EAAeM,CAAO,EAChDd,EAAY,YAAcQ,EAAeO,CAAO,CAClD,CAEA,SAASC,EAAUC,EAAI,CAMrB,MAAML,EAAO,KAAK,MAAMK,EAAK,KAAG,EAC1BJ,EAAQ,KAAK,MAAOI,EAAK,MAAO,IAAI,EACpCH,EAAU,KAAK,MAAQG,EAAK,MAAO,KAAQ,GAAM,EACjDF,EAAU,KAAK,MAASE,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAL,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}